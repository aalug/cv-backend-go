// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: skill.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (name, description, category, importance, image, hex_theme_color, cv_profile_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, description, category, image, hex_theme_color, cv_profile_id, importance
`

type CreateSkillParams struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	Category      string `json:"category"`
	Importance    int32  `json:"importance"`
	Image         string `json:"image"`
	HexThemeColor string `json:"hex_theme_color"`
	CvProfileID   int32  `json:"cv_profile_id"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Importance,
		arg.Image,
		arg.HexThemeColor,
		arg.CvProfileID,
	)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Image,
		&i.HexThemeColor,
		&i.CvProfileID,
		&i.Importance,
	)
	return i, err
}

const getSkill = `-- name: GetSkill :one
SELECT id, name, description, category, image, hex_theme_color, cv_profile_id, importance
FROM skills
WHERE id = $1
`

func (q *Queries) GetSkill(ctx context.Context, id int32) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Image,
		&i.HexThemeColor,
		&i.CvProfileID,
		&i.Importance,
	)
	return i, err
}

const listSkills = `-- name: ListSkills :many
SELECT id, name, description, category, image, hex_theme_color, cv_profile_id, importance
FROM skills
WHERE cv_profile_id = $1
GROUP BY category, id
ORDER BY importance
LIMIT $2 OFFSET $3
`

type ListSkillsParams struct {
	CvProfileID int32 `json:"cv_profile_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListSkills(ctx context.Context, arg ListSkillsParams) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, listSkills, arg.CvProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Image,
			&i.HexThemeColor,
			&i.CvProfileID,
			&i.Importance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: technology.sql

package db

import (
	"context"
)

const createProjectTechnology = `-- name: CreateProjectTechnology :one
INSERT INTO project_technologies (project_id, technology_id)
VALUES ($1, $2)
RETURNING project_id, technology_id
`

type CreateProjectTechnologyParams struct {
	ProjectID    int32 `json:"project_id"`
	TechnologyID int32 `json:"technology_id"`
}

func (q *Queries) CreateProjectTechnology(ctx context.Context, arg CreateProjectTechnologyParams) (ProjectTechnology, error) {
	row := q.db.QueryRowContext(ctx, createProjectTechnology, arg.ProjectID, arg.TechnologyID)
	var i ProjectTechnology
	err := row.Scan(&i.ProjectID, &i.TechnologyID)
	return i, err
}

const createTechnology = `-- name: CreateTechnology :one
INSERT INTO technologies (name, url, order_field)
VALUES ($1, $2, $3)
RETURNING id, name, url, order_field
`

type CreateTechnologyParams struct {
	Name       string `json:"name"`
	Url        string `json:"url"`
	OrderField int32  `json:"order_field"`
}

func (q *Queries) CreateTechnology(ctx context.Context, arg CreateTechnologyParams) (Technology, error) {
	row := q.db.QueryRowContext(ctx, createTechnology, arg.Name, arg.Url, arg.OrderField)
	var i Technology
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.OrderField,
	)
	return i, err
}

const listTechnologiesForProject = `-- name: ListTechnologiesForProject :many
SELECT t.id,
       t.name,
       t.url
FROM project_technologies pt
         JOIN technologies t ON pt.technology_id = t.id
WHERE pt.project_id = $1
ORDER BY t.order_field
`

type ListTechnologiesForProjectRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) ListTechnologiesForProject(ctx context.Context, projectID int32) ([]ListTechnologiesForProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, listTechnologiesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTechnologiesForProjectRow{}
	for rows.Next() {
		var i ListTechnologiesForProjectRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

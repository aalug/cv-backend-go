// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: cv_education.sql

package db

import (
	"context"
	"time"
)

const createCvEducation = `-- name: CreateCvEducation :one
INSERT INTO cv_educations (institution, degree, start_date, end_date, cv_profile_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, institution, degree, start_date, end_date, cv_profile_id
`

type CreateCvEducationParams struct {
	Institution string    `json:"institution"`
	Degree      string    `json:"degree"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	CvProfileID int32     `json:"cv_profile_id"`
}

func (q *Queries) CreateCvEducation(ctx context.Context, arg CreateCvEducationParams) (CvEducation, error) {
	row := q.db.QueryRowContext(ctx, createCvEducation,
		arg.Institution,
		arg.Degree,
		arg.StartDate,
		arg.EndDate,
		arg.CvProfileID,
	)
	var i CvEducation
	err := row.Scan(
		&i.ID,
		&i.Institution,
		&i.Degree,
		&i.StartDate,
		&i.EndDate,
		&i.CvProfileID,
	)
	return i, err
}

const getCvEducation = `-- name: GetCvEducation :one
SELECT id, institution, degree, start_date, end_date, cv_profile_id
FROM cv_educations
WHERE id = $1
`

func (q *Queries) GetCvEducation(ctx context.Context, id int32) (CvEducation, error) {
	row := q.db.QueryRowContext(ctx, getCvEducation, id)
	var i CvEducation
	err := row.Scan(
		&i.ID,
		&i.Institution,
		&i.Degree,
		&i.StartDate,
		&i.EndDate,
		&i.CvProfileID,
	)
	return i, err
}

const listCvEducations = `-- name: ListCvEducations :many
SELECT id, institution, degree, start_date, end_date, cv_profile_id
FROM cv_educations
WHERE cv_profile_id = $1
ORDER BY start_date DESC
LIMIT $2 OFFSET $3
`

type ListCvEducationsParams struct {
	CvProfileID int32 `json:"cv_profile_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListCvEducations(ctx context.Context, arg ListCvEducationsParams) ([]CvEducation, error) {
	rows, err := q.db.QueryContext(ctx, listCvEducations, arg.CvProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CvEducation{}
	for rows.Next() {
		var i CvEducation
		if err := rows.Scan(
			&i.ID,
			&i.Institution,
			&i.Degree,
			&i.StartDate,
			&i.EndDate,
			&i.CvProfileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: project.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (title,
                      short_description,
                      description,
                      image,
                      hex_theme_color,
                      project_url,
                      cv_profile_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, short_description, description, image, hex_theme_color, project_url, cv_profile_id, significance
`

type CreateProjectParams struct {
	Title            string `json:"title"`
	ShortDescription string `json:"short_description"`
	Description      string `json:"description"`
	Image            string `json:"image"`
	HexThemeColor    string `json:"hex_theme_color"`
	ProjectUrl       string `json:"project_url"`
	CvProfileID      int32  `json:"cv_profile_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.ShortDescription,
		arg.Description,
		arg.Image,
		arg.HexThemeColor,
		arg.ProjectUrl,
		arg.CvProfileID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ShortDescription,
		&i.Description,
		&i.Image,
		&i.HexThemeColor,
		&i.ProjectUrl,
		&i.CvProfileID,
		&i.Significance,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id,
       title,
       short_description,
       description,
       image,
       hex_theme_color,
       project_url,
       significance
FROM projects
WHERE cv_profile_id = $1
ORDER BY significance
LIMIT $2 OFFSET $3
`

type ListProjectsParams struct {
	CvProfileID int32 `json:"cv_profile_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type ListProjectsRow struct {
	ID               int32  `json:"id"`
	Title            string `json:"title"`
	ShortDescription string `json:"short_description"`
	Description      string `json:"description"`
	Image            string `json:"image"`
	HexThemeColor    string `json:"hex_theme_color"`
	ProjectUrl       string `json:"project_url"`
	Significance     int32  `json:"significance"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]ListProjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProjects, arg.CvProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProjectsRow{}
	for rows.Next() {
		var i ListProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ShortDescription,
			&i.Description,
			&i.Image,
			&i.HexThemeColor,
			&i.ProjectUrl,
			&i.Significance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsBySkillName = `-- name: ListProjectsBySkillName :many
SELECT p.id,
       p.title,
       p.short_description,
       p.description,
       p.image,
       p.hex_theme_color,
       p.project_url,
       p.significance
FROM projects p
         JOIN project_skills ps ON p.id = ps.project_id
         JOIN skills s ON ps.skill_id = s.id
WHERE s.name = $4::text
  AND p.cv_profile_id = $1
ORDER BY significance
LIMIT $2 OFFSET $3
`

type ListProjectsBySkillNameParams struct {
	CvProfileID int32  `json:"cv_profile_id"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
	SkillName   string `json:"skill_name"`
}

type ListProjectsBySkillNameRow struct {
	ID               int32  `json:"id"`
	Title            string `json:"title"`
	ShortDescription string `json:"short_description"`
	Description      string `json:"description"`
	Image            string `json:"image"`
	HexThemeColor    string `json:"hex_theme_color"`
	ProjectUrl       string `json:"project_url"`
	Significance     int32  `json:"significance"`
}

func (q *Queries) ListProjectsBySkillName(ctx context.Context, arg ListProjectsBySkillNameParams) ([]ListProjectsBySkillNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsBySkillName,
		arg.CvProfileID,
		arg.Limit,
		arg.Offset,
		arg.SkillName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProjectsBySkillNameRow{}
	for rows.Next() {
		var i ListProjectsBySkillNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ShortDescription,
			&i.Description,
			&i.Image,
			&i.HexThemeColor,
			&i.ProjectUrl,
			&i.Significance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

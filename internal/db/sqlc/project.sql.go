// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: project.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (title,
                      short_description,
                      description,
                      image,
                      technologies_used,
                      hex_theme_color,
                      project_url,
                      cv_profile_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, short_description, description, image, technologies_used, hex_theme_color, project_url, cv_profile_id
`

type CreateProjectParams struct {
	Title            string   `json:"title"`
	ShortDescription string   `json:"short_description"`
	Description      string   `json:"description"`
	Image            string   `json:"image"`
	TechnologiesUsed []string `json:"technologies_used"`
	HexThemeColor    string   `json:"hex_theme_color"`
	ProjectUrl       string   `json:"project_url"`
	CvProfileID      int32    `json:"cv_profile_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.ShortDescription,
		arg.Description,
		arg.Image,
		pq.Array(arg.TechnologiesUsed),
		arg.HexThemeColor,
		arg.ProjectUrl,
		arg.CvProfileID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ShortDescription,
		&i.Description,
		&i.Image,
		pq.Array(&i.TechnologiesUsed),
		&i.HexThemeColor,
		&i.ProjectUrl,
		&i.CvProfileID,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, title, short_description, description, image, technologies_used, hex_theme_color, project_url, cv_profile_id
FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ShortDescription,
		&i.Description,
		&i.Image,
		pq.Array(&i.TechnologiesUsed),
		&i.HexThemeColor,
		&i.ProjectUrl,
		&i.CvProfileID,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, title, short_description, description, image, technologies_used, hex_theme_color, project_url, cv_profile_id
FROM projects
ORDER BY technologies_used
LIMIT $1 OFFSET $2
`

type ListProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ShortDescription,
			&i.Description,
			&i.Image,
			pq.Array(&i.TechnologiesUsed),
			&i.HexThemeColor,
			&i.ProjectUrl,
			&i.CvProfileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

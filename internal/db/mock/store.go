// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aalug/cv-backend-go/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/aalug/cv-backend-go/internal/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCvEducation mocks base method.
func (m *MockStore) CreateCvEducation(arg0 context.Context, arg1 db.CreateCvEducationParams) (db.CvEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCvEducation", arg0, arg1)
	ret0, _ := ret[0].(db.CvEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCvEducation indicates an expected call of CreateCvEducation.
func (mr *MockStoreMockRecorder) CreateCvEducation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCvEducation", reflect.TypeOf((*MockStore)(nil).CreateCvEducation), arg0, arg1)
}

// CreateCvProfile mocks base method.
func (m *MockStore) CreateCvProfile(arg0 context.Context, arg1 db.CreateCvProfileParams) (db.CvProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCvProfile", arg0, arg1)
	ret0, _ := ret[0].(db.CvProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCvProfile indicates an expected call of CreateCvProfile.
func (mr *MockStoreMockRecorder) CreateCvProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCvProfile", reflect.TypeOf((*MockStore)(nil).CreateCvProfile), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockStore) CreateProject(arg0 context.Context, arg1 db.CreateProjectParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockStoreMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockStore)(nil).CreateProject), arg0, arg1)
}

// CreateSkill mocks base method.
func (m *MockStore) CreateSkill(arg0 context.Context, arg1 db.CreateSkillParams) (db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkill", arg0, arg1)
	ret0, _ := ret[0].(db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSkill indicates an expected call of CreateSkill.
func (mr *MockStoreMockRecorder) CreateSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkill", reflect.TypeOf((*MockStore)(nil).CreateSkill), arg0, arg1)
}

// GetCvEducation mocks base method.
func (m *MockStore) GetCvEducation(arg0 context.Context, arg1 int32) (db.CvEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCvEducation", arg0, arg1)
	ret0, _ := ret[0].(db.CvEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCvEducation indicates an expected call of GetCvEducation.
func (mr *MockStoreMockRecorder) GetCvEducation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCvEducation", reflect.TypeOf((*MockStore)(nil).GetCvEducation), arg0, arg1)
}

// GetCvProfile mocks base method.
func (m *MockStore) GetCvProfile(arg0 context.Context, arg1 int32) (db.CvProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCvProfile", arg0, arg1)
	ret0, _ := ret[0].(db.CvProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCvProfile indicates an expected call of GetCvProfile.
func (mr *MockStoreMockRecorder) GetCvProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCvProfile", reflect.TypeOf((*MockStore)(nil).GetCvProfile), arg0, arg1)
}

// GetSkill mocks base method.
func (m *MockStore) GetSkill(arg0 context.Context, arg1 int32) (db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkill", arg0, arg1)
	ret0, _ := ret[0].(db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkill indicates an expected call of GetSkill.
func (mr *MockStoreMockRecorder) GetSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkill", reflect.TypeOf((*MockStore)(nil).GetSkill), arg0, arg1)
}

// ListCvEducations mocks base method.
func (m *MockStore) ListCvEducations(arg0 context.Context, arg1 db.ListCvEducationsParams) ([]db.CvEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCvEducations", arg0, arg1)
	ret0, _ := ret[0].([]db.CvEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCvEducations indicates an expected call of ListCvEducations.
func (mr *MockStoreMockRecorder) ListCvEducations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCvEducations", reflect.TypeOf((*MockStore)(nil).ListCvEducations), arg0, arg1)
}

// ListProjects mocks base method.
func (m *MockStore) ListProjects(arg0 context.Context, arg1 db.ListProjectsParams) ([]db.ListProjectsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].([]db.ListProjectsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockStoreMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockStore)(nil).ListProjects), arg0, arg1)
}

// ListSkills mocks base method.
func (m *MockStore) ListSkills(arg0 context.Context, arg1 db.ListSkillsParams) ([]db.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkills", arg0, arg1)
	ret0, _ := ret[0].([]db.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkills indicates an expected call of ListSkills.
func (mr *MockStoreMockRecorder) ListSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkills", reflect.TypeOf((*MockStore)(nil).ListSkills), arg0, arg1)
}
